pipeline {
  agent any

  parameters {
      string(name: 'GRAFANA_URL', defaultValue: 'http://grafana:3000', description: 'URL do Grafana')
      string(name: 'SERVICE_ACCOUNT_TOKEN', description: 'Token de Service Account com permissão Admin')
      string(name: 'ORG_ID', description: 'ID da organização já existente no Grafana')
      booleanParam(name: 'RESET_DATASOURCES', defaultValue: false, description: 'Remover datasources existentes antes de configurar')
  }

  stages {
      stage('Identificar Datasources nas Dashboards') {
          steps {
              script {
                  echo '🔍 Identificando datasources utilizados nas dashboards...'

                  def dashboardFiles = findFiles(glob: 'dashboards/*.json')
                  def datasources = []

                  dashboardFiles.each { file ->
                      def content = readFile(file.path)
                      def json = new groovy.json.JsonSlurper().parseText(content)

                      json.__inputs?.each { input ->
                          if (input.type == 'datasource') {
                              datasources.add([
                                  name: input.name,
                                  type: input.pluginId ?: 'mysql'
                              ])
                          }
                      }
                  }

                  env.UNIQUE_DATASOURCES = datasources.unique().toString()
                  echo "Datasources identificados: ${env.UNIQUE_DATASOURCES}"
              }
          }
      }

      stage('Validar e Criar Datasources') {
          steps {
              script {
                  echo '⚙️ Validando e criando datasources...'

                  def datasources = evaluate(readJSON(text: env.UNIQUE_DATASOURCES))

                  datasources.each { ds ->
                      def encodedName = URLEncoder.encode(ds.name, 'UTF-8')
                      def exists = false

                      try {
                          def check = httpRequest(
                              httpMode: 'GET',
                              url: "${params.GRAFANA_URL}/api/datasources/name/${encodedName}",
                              customHeaders: [
                                  [ name: 'Authorization', value: "Bearer ${params.SERVICE_ACCOUNT_TOKEN}" ],
                                  [ name: 'X-Grafana-Org-Id', value: "${params.ORG_ID}" ]
                              ]
                          )
                          exists = (check.status == 200)
                      } catch (e) {
                          exists = false
                      }

                      if (!exists) {
                          echo "➕ Criando datasource '${ds.name}'"

                          def body = [
                              name: ds.name,
                              type: ds.type,
                              url: 'http://localhost',
                              access: 'proxy',
                              user: 'admin',
                              database: 'default'
                          ]

                          httpRequest(
                              httpMode: 'POST',
                              url: "${params.GRAFANA_URL}/api/datasources",
                              contentType: 'APPLICATION_JSON',
                              customHeaders: [
                                  [ name: 'Authorization', value: "Bearer ${params.SERVICE_ACCOUNT_TOKEN}" ],
                                  [ name: 'X-Grafana-Org-Id', value: "${params.ORG_ID}" ]
                              ],
                              requestBody: groovy.json.JsonOutput.toJson(body)
                          )
                      } else {
                          echo "ℹ️ Datasource '${ds.name}' já existe."
                      }
                  }
              }
          }
      }

      stage('Importar Dashboards') {
          steps {
              script {
                  echo '📊 Importando dashboards...'

                  def dashboardFiles = findFiles(glob: 'dashboards/*.json')

                  dashboardFiles.each { file ->
                      def content = readFile(file.path)

                      def body = [
                          dashboard: new groovy.json.JsonSlurper().parseText(content),
                          folderId: 0,
                          overwrite: true
                      ]

                      httpRequest(
                          httpMode: 'POST',
                          url: "${params.GRAFANA_URL}/api/dashboards/db",
                          contentType: 'APPLICATION_JSON',
                          customHeaders: [
                              [ name: 'Authorization', value: "Bearer ${params.SERVICE_ACCOUNT_TOKEN}" ],
                              [ name: 'X-Grafana-Org-Id', value: "${params.ORG_ID}" ]
                          ],
                          requestBody: groovy.json.JsonOutput.toJson(body)
                      )

                      echo "✅ Dashboard '${file.name}' importado."
                  }
              }
          }
      }
  }
}
